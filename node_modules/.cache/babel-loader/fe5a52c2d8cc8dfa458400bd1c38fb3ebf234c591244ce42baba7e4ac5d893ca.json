{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yamam\\\\OneDrive\\\\Desktop\\\\CALCV2.0\\\\src\\\\pages\\\\Calculator.js\",\n  _s = $RefreshSig$();\n//citations: https://www.w3schools.com/css/\n//citations: https://react.dev/learn\n//citations: https://legacy.reactjs.org/docs/getting-started.html\nimport React from 'react';\n\n//main react component (the calculator)\n//assign CalculatorButton a property called value and set it to the numbers for the calculator\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calculator = () => {\n  _s();\n  // State to manage calculator display and calculations\n  const [calculate, setCalculator] = React.useState({\n    current: \"0\",\n    // Current input or calculated value\n    total: \"0\",\n    // Total accumulated value\n    isInitial: true,\n    // Tracks if the calculator is in an initial state\n    chainOp: \"\" // Operator for the next operation\n  });\n\n  //updates the state of the display to show whatever number is being pressed through useState and getNumber function\n  //handleNumebr function called during OnClick events for numbers\n\n  // Function to take care of numeric button clicks  \n  function getNumber(value) {\n    let newValue = value; //variable that calculates new string (display)\n    if (!calculate.isInitial) {\n      //if calculate is not initial state then concatenate\n      newValue = calculate.current + value; //current value and append onto the value\n    }\n    // Update the calculator state with the new value\n    setCalculator({\n      current: newValue,\n      total: calculate.total,\n      isInitial: false,\n      chainOp: calculate.chainOp\n    }); //set current property to new value \n  }\n\n  // Function to take care of operator button clicks\n  function getOperator(value) {\n    // Perform the calculation and update the calculator state\n    const total = doCalculation();\n    setCalculator({\n      current: total.toString(),\n      total: total.toString(),\n      isInitial: true,\n      chainOp: value\n    });\n  }\n\n  // Function to perform calculations based on the current operator\n  function doCalculation() {\n    let total = parseFloat(calculate.total);\n    const currentNumber = parseFloat(calculate.current);\n    switch (calculate.chainOp) {\n      case \"+\":\n        total += parseFloat(calculate.current);\n        break;\n      case '-':\n        total -= parseFloat(calculate.current);\n        break;\n      case '*':\n        total *= parseFloat(calculate.current);\n        break;\n      case \"/\":\n        if (currentNumber === 0) {\n          alert(\"Error: Dividing by Zero is Undefined\");\n        } else {\n          total /= currentNumber;\n        }\n        break;\n      default:\n        total = parseFloat(calculate.current);\n    }\n    return total;\n  }\n\n  // Function to render the current display value\n  function showDisplay() {\n    return calculate.current;\n  }\n\n  // Function to take care of the clear button click (resets the calculator)\n  function getClear() {\n    setCalculator({\n      current: \"0\",\n      total: \"0\",\n      isInitial: true,\n      chainOp: \"\"\n    });\n  }\n\n  // JSX for the Calculator component HTML tags, etc.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculator\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display\",\n      children: showDisplay()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"button\",\n      value: \"7\",\n      onClick: getNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"button\",\n      value: \"8\",\n      onClick: getNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"button\",\n      value: \"9\",\n      onClick: getNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"operator\",\n      onClick: getOperator,\n      value: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"button\",\n      value: \"4\",\n      onClick: getNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"button\",\n      value: \"5\",\n      onClick: getNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"button\",\n      value: \"6\",\n      onClick: getNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"operator\",\n      onClick: getOperator,\n      value: \"*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"button\",\n      value: \"1\",\n      onClick: getNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"button\",\n      value: \"2\",\n      onClick: getNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"button\",\n      value: \"3\",\n      onClick: getNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"operator\",\n      onClick: getOperator,\n      value: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"button\",\n      value: \"C\",\n      onClick: getClear\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"button\",\n      value: \"0\",\n      onClick: getNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"operator\",\n      value: \"=\",\n      onClick: getOperator\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorButton, {\n      className: \"operator\",\n      onClick: getOperator,\n      value: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n//child component to output buttons using props (allows it to use the className, value, onclicks, etc)\n//pass parameter through callback function for onClicks\n_s(Calculator, \"0Mb2q4Ckmar3SdyGTPhDEboVKyg=\");\n_c = Calculator;\nfunction CalculatorButton(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: props.className,\n    onClick: () => {\n      props.onClick(props.value);\n    },\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 10\n  }, this);\n}\n_c2 = CalculatorButton;\nexport default Calculator;\nvar _c, _c2;\n$RefreshReg$(_c, \"Calculator\");\n$RefreshReg$(_c2, \"CalculatorButton\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Calculator","_s","calculate","setCalculator","useState","current","total","isInitial","chainOp","getNumber","value","newValue","getOperator","doCalculation","toString","parseFloat","currentNumber","alert","showDisplay","getClear","className","children","fileName","_jsxFileName","lineNumber","columnNumber","CalculatorButton","onClick","_c","props","_c2","$RefreshReg$"],"sources":["C:/Users/yamam/OneDrive/Desktop/CALCV2.0/src/pages/Calculator.js"],"sourcesContent":["//citations: https://www.w3schools.com/css/\n//citations: https://react.dev/learn\n//citations: https://legacy.reactjs.org/docs/getting-started.html\nimport React from 'react'\n\n\n\n\n//main react component (the calculator)\n//assign CalculatorButton a property called value and set it to the numbers for the calculator\nconst Calculator= () => {\n    // State to manage calculator display and calculations\n    const [calculate, setCalculator] = React.useState({\n      current: \"0\", // Current input or calculated value\n      total: \"0\", // Total accumulated value\n      isInitial: true, // Tracks if the calculator is in an initial state\n      chainOp: \"\" // Operator for the next operation\n    }); \n    \n    \n    //updates the state of the display to show whatever number is being pressed through useState and getNumber function\n    //handleNumebr function called during OnClick events for numbers\n\n  // Function to take care of numeric button clicks  \n  function getNumber(value) {\n    let newValue = value; //variable that calculates new string (display)\n    if (!calculate.isInitial){ //if calculate is not initial state then concatenate\n      newValue = calculate.current + value; //current value and append onto the value\n    }\n    // Update the calculator state with the new value\n    setCalculator({current: newValue, total: calculate.total, isInitial: false, chainOp: calculate.chainOp}); //set current property to new value \n  }\n\n  // Function to take care of operator button clicks\n  function getOperator(value) {\n    // Perform the calculation and update the calculator state\n    const total = doCalculation();\n      setCalculator({current: total.toString(), total: total.toString(), isInitial: true, chainOp: value});\n  }\n\n   // Function to perform calculations based on the current operator\n  function doCalculation(){\n    let total = parseFloat(calculate.total)\n    const currentNumber = parseFloat(calculate.current);\n    switch(calculate.chainOp){\n      case \"+\":\n        total += parseFloat(calculate.current);\n        break;\n      case '-':\n        total -= parseFloat(calculate.current);\n        break;\n      case '*':\n        total *= parseFloat(calculate.current);\n        break;\n        case \"/\":\n\n          if (currentNumber === 0) {\n            alert(\"Error: Dividing by Zero is Undefined\");\n          } else {\n            total /= currentNumber;\n          }\n        break;\n      default:\n        total = parseFloat(calculate.current)\n    }\n    return total;\n  }\n\n  // Function to render the current display value\n  function showDisplay() {\n    return calculate.current\n  }\n\n  // Function to take care of the clear button click (resets the calculator)\n  function getClear(){\n    setCalculator({\n      current: \"0\",\n      total: \"0\",\n      isInitial: true,\n      chainOp: \"\"\n    });\n  }\n\n\n  // JSX for the Calculator component HTML tags, etc.\n  return (\n    <div className=\"calculator\">\n      <div className=\"display\">{showDisplay()}</div>\n      <CalculatorButton className =\"button\" value=\"7\" onClick={getNumber}/> \n      <CalculatorButton className =\"button\" value=\"8\" onClick={getNumber}/>\n      <CalculatorButton className =\"button\" value=\"9\" onClick={getNumber}/>\n      <CalculatorButton className =\"operator\" onClick={getOperator} value=\"/\"/> \n      <CalculatorButton className =\"button\" value=\"4\" onClick={getNumber}/>\n      <CalculatorButton className =\"button\" value=\"5\" onClick={getNumber}/>\n      <CalculatorButton className =\"button\" value=\"6\" onClick={getNumber}/>\n      <CalculatorButton className =\"operator\" onClick={getOperator} value=\"*\"/>\n      <CalculatorButton className =\"button\" value=\"1\" onClick={getNumber}/>\n      <CalculatorButton className =\"button\" value=\"2\" onClick={getNumber}/>\n      <CalculatorButton className =\"button\" value=\"3\" onClick={getNumber}/>\n      <CalculatorButton className =\"operator\" onClick={getOperator} value=\"-\"/>\n      <CalculatorButton className =\"button\" value=\"C\" onClick={getClear} />\n      <CalculatorButton className =\"button\" value=\"0\" onClick={getNumber}/>\n      <CalculatorButton className =\"operator\" value=\"=\" onClick={getOperator}/>\n      <CalculatorButton className =\"operator\" onClick={getOperator} value=\"+\"/>\n      </div>   \n      \n    \n  )\n  \n\n}\n\n\n//child component to output buttons using props (allows it to use the className, value, onclicks, etc)\n//pass parameter through callback function for onClicks\nfunction CalculatorButton(props) {\n  return <button className={props.className} onClick={() => {props.onClick(props.value)}}>{props.value}</button>\n}\n\nexport default Calculator\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}