{"ast":null,"code":"//citations: https://www.w3schools.com/css/\n//citations: https://react.dev/learn\n//citations: https://legacy.reactjs.org/docs/getting-started.html\nimport React from'react';//main react component (the calculator)\n//assign CalculatorButton a property called value and set it to the numbers for the calculator\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Calculator=()=>{// State to manage calculator display and calculations\nconst[calculate,setCalculator]=React.useState({current:\"0\",// Current input or calculated value\ntotal:\"0\",// Total accumulated value\nisInitial:true,// Tracks if the calculator is in an initial state\nchainOp:\"\"// Operator for the next operation\n});//updates the state of the display to show whatever number is being pressed through useState and getNumber function\n//handleNumebr function called during OnClick events for numbers\n// Function to take care of numeric button clicks  \nfunction getNumber(value){let newValue=value;//variable that calculates new string (display)\nif(!calculate.isInitial){//if calculate is not initial state then concatenate\nnewValue=calculate.current+value;//current value and append onto the value\n}// Update the calculator state with the new value\nsetCalculator({current:newValue,total:calculate.total,isInitial:false,chainOp:calculate.chainOp});//set current property to new value \n}// Function to take care of operator button clicks\nfunction getOperator(value){// Perform the calculation and update the calculator state\nconst total=doCalculation();setCalculator({current:total.toString(),total:total.toString(),isInitial:true,chainOp:value});}// Function to perform calculations based on the current operator\nfunction doCalculation(){let total=parseFloat(calculate.total);const currentNumber=parseFloat(calculate.current);switch(calculate.chainOp){case\"+\":total+=parseFloat(calculate.current);break;case'-':total-=parseFloat(calculate.current);break;case'*':total*=parseFloat(calculate.current);break;case\"/\":if(currentNumber===0){alert(\"Error: Dividing by Zero is Undefined\");}else{total/=currentNumber;}break;default:total=parseFloat(calculate.current);}return total;}// Function to render the current display value\nfunction showDisplay(){return calculate.current;}// Function to take care of the clear button click (resets the calculator)\nfunction getClear(){setCalculator({current:\"0\",total:\"0\",isInitial:true,chainOp:\"\"});}// JSX for the Calculator component HTML tags, etc.\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"calculator\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"display\",children:showDisplay()}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"button\",value:\"7\",onClick:getNumber}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"button\",value:\"8\",onClick:getNumber}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"button\",value:\"9\",onClick:getNumber}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"operator\",onClick:getOperator,value:\"/\"}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"button\",value:\"4\",onClick:getNumber}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"button\",value:\"5\",onClick:getNumber}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"button\",value:\"6\",onClick:getNumber}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"operator\",onClick:getOperator,value:\"*\"}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"button\",value:\"1\",onClick:getNumber}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"button\",value:\"2\",onClick:getNumber}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"button\",value:\"3\",onClick:getNumber}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"operator\",onClick:getOperator,value:\"-\"}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"button\",value:\"C\",onClick:getClear}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"button\",value:\"0\",onClick:getNumber}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"operator\",value:\"=\",onClick:getOperator}),/*#__PURE__*/_jsx(CalculatorButton,{className:\"operator\",onClick:getOperator,value:\"+\"})]});};//child component to output buttons using props (allows it to use the className, value, onclicks, etc)\n//pass parameter through callback function for onClicks\nfunction CalculatorButton(props){return/*#__PURE__*/_jsx(\"button\",{className:props.className,onClick:()=>{props.onClick(props.value);},children:props.value});}export default Calculator;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","Calculator","calculate","setCalculator","useState","current","total","isInitial","chainOp","getNumber","value","newValue","getOperator","doCalculation","toString","parseFloat","currentNumber","alert","showDisplay","getClear","className","children","CalculatorButton","onClick","props"],"sources":["C:/Users/yamam/OneDrive/Desktop/CALCUALTOR WORK ON THIS TOMORROW FINAL V I THINK YEP/src/pages/Calculator.js"],"sourcesContent":["//citations: https://www.w3schools.com/css/\n//citations: https://react.dev/learn\n//citations: https://legacy.reactjs.org/docs/getting-started.html\nimport React from 'react'\n\n\n\n\n//main react component (the calculator)\n//assign CalculatorButton a property called value and set it to the numbers for the calculator\nconst Calculator= () => {\n    // State to manage calculator display and calculations\n    const [calculate, setCalculator] = React.useState({\n      current: \"0\", // Current input or calculated value\n      total: \"0\", // Total accumulated value\n      isInitial: true, // Tracks if the calculator is in an initial state\n      chainOp: \"\" // Operator for the next operation\n    }); \n    \n    \n    //updates the state of the display to show whatever number is being pressed through useState and getNumber function\n    //handleNumebr function called during OnClick events for numbers\n\n  // Function to take care of numeric button clicks  \n  function getNumber(value) {\n    let newValue = value; //variable that calculates new string (display)\n    if (!calculate.isInitial){ //if calculate is not initial state then concatenate\n      newValue = calculate.current + value; //current value and append onto the value\n    }\n    // Update the calculator state with the new value\n    setCalculator({current: newValue, total: calculate.total, isInitial: false, chainOp: calculate.chainOp}); //set current property to new value \n  }\n\n  // Function to take care of operator button clicks\n  function getOperator(value) {\n    // Perform the calculation and update the calculator state\n    const total = doCalculation();\n      setCalculator({current: total.toString(), total: total.toString(), isInitial: true, chainOp: value});\n  }\n\n   // Function to perform calculations based on the current operator\n  function doCalculation(){\n    let total = parseFloat(calculate.total)\n    const currentNumber = parseFloat(calculate.current);\n    switch(calculate.chainOp){\n      case \"+\":\n        total += parseFloat(calculate.current);\n        break;\n      case '-':\n        total -= parseFloat(calculate.current);\n        break;\n      case '*':\n        total *= parseFloat(calculate.current);\n        break;\n        case \"/\":\n\n          if (currentNumber === 0) {\n            alert(\"Error: Dividing by Zero is Undefined\");\n          } else {\n            total /= currentNumber;\n          }\n        break;\n      default:\n        total = parseFloat(calculate.current)\n    }\n    return total;\n  }\n\n  // Function to render the current display value\n  function showDisplay() {\n    return calculate.current\n  }\n\n  // Function to take care of the clear button click (resets the calculator)\n  function getClear(){\n    setCalculator({\n      current: \"0\",\n      total: \"0\",\n      isInitial: true,\n      chainOp: \"\"\n    });\n  }\n\n\n  // JSX for the Calculator component HTML tags, etc.\n  return (\n    <div className=\"calculator\">\n      <div className=\"display\">{showDisplay()}</div>\n      <CalculatorButton className =\"button\" value=\"7\" onClick={getNumber}/> \n      <CalculatorButton className =\"button\" value=\"8\" onClick={getNumber}/>\n      <CalculatorButton className =\"button\" value=\"9\" onClick={getNumber}/>\n      <CalculatorButton className =\"operator\" onClick={getOperator} value=\"/\"/> \n      <CalculatorButton className =\"button\" value=\"4\" onClick={getNumber}/>\n      <CalculatorButton className =\"button\" value=\"5\" onClick={getNumber}/>\n      <CalculatorButton className =\"button\" value=\"6\" onClick={getNumber}/>\n      <CalculatorButton className =\"operator\" onClick={getOperator} value=\"*\"/>\n      <CalculatorButton className =\"button\" value=\"1\" onClick={getNumber}/>\n      <CalculatorButton className =\"button\" value=\"2\" onClick={getNumber}/>\n      <CalculatorButton className =\"button\" value=\"3\" onClick={getNumber}/>\n      <CalculatorButton className =\"operator\" onClick={getOperator} value=\"-\"/>\n      <CalculatorButton className =\"button\" value=\"C\" onClick={getClear} />\n      <CalculatorButton className =\"button\" value=\"0\" onClick={getNumber}/>\n      <CalculatorButton className =\"operator\" value=\"=\" onClick={getOperator}/>\n      <CalculatorButton className =\"operator\" onClick={getOperator} value=\"+\"/>\n      </div>   \n      \n    \n  )\n  \n\n}\n\n\n//child component to output buttons using props (allows it to use the className, value, onclicks, etc)\n//pass parameter through callback function for onClicks\nfunction CalculatorButton(props) {\n  return <button className={props.className} onClick={() => {props.onClick(props.value)}}>{props.value}</button>\n}\n\nexport default Calculator\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}